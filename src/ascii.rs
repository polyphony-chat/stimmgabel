// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use colored::Colorize;

pub(crate) fn ascii_waves() {
    let ascii_art = r#"
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████▓▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓█████████████████████████████████████████████
    ██████████████████████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓██████████████████████
    █████████████████████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓█████████████████████
    ██████████████████████▓▒▒▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓██████████████████████
    ████████████████████████▓▓▓███████████████▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓████████████████████████
    █████████████████████████████████████████████████████▓▓▓▓▓████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓██████████████████████████████████████████████████
    ██████████████████████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▓▓██████████████████████
    ██████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██████████████████████
    ██████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██████████████████████
    ███████████████████████▓▓▓▓▓▓▓▓▓███▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓███████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ███████████████████████▓▓▓▓▓▓▓█████████▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓███████████████████████
    ██████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██████████████████████
    ██████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓█████████████████████
    ██████████████████████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓██████████████████████
    ███████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████▓▓▓█████████████████▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓████████████████████████
    ██████████████████████▓▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓██████████████████████
    ██████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓█████████████████████
    ██████████████████████▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓██████████████████████
    █████████████████████████▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓██████████████████▓█████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████
    "#;

    // The trans flag has 5 segments, so we divide the "canvas" into 5 parts
    let fifth = ascii_art.lines().count() / 5;
    // The 5 (3) colors of the trans flag
    let colors = [
        (91, 206, 250),
        (245, 169, 184),
        (255, 255, 255),
        (245, 169, 184),
        (91, 206, 250),
    ];
    let mut line_iter = 0;
    // Represents the current color from the `colors` vec
    let mut current_color = 0;
    for line in ascii_art.lines() {
        line_iter += 1;
        if line_iter == fifth {
            // If we have reached a new segment, switch to the next color
            line_iter = 0;
            current_color += 1;
        }
        let color = colors.get(current_color).unwrap_or(colors.get(4).unwrap());
        // For each character in the current line, check which character we are dealing with and
        // replace it with the appropriate color.
        for ch in line.chars() {
            match ch {
                '▒' => print!("{}", "▒".truecolor(255, 255, 255)), // white
                '▓' => print!("{}", "▓".truecolor(240, 240, 240)), // light gray
                '█' => print!("{}", " ".on_truecolor(color.0, color.1, color.2)), // background
                // Newline characters etc. are still characters; make sure not to print them.
                _ => (),
            }
        }
        // Line done, start the next one.
        println!();
    }
}
